{"ast":null,"code":"var _jsxFileName = \"/Users/Rickychen/Documents/Coding/BootCamp/Potfolio_Qi_Chen/src/components/contact.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Here we import a helper function that will check if the email is valid\nimport { checkPassword, validateEmail } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form() {\n  _s();\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'userName') {\n      setUserName(inputValue);\n    } else {\n      setPassword(inputValue);\n    }\n  };\n  const handleFormSubmit = e => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\n    if (!validateEmail(email) || !userName) {\n      setErrorMessage('Email or username is invalid');\n      // We want to exit out of this code block if something is wrong so that the user can correct it\n      return;\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    }\n\n    if (!checkPassword(password)) {\n      setErrorMessage(`Choose a more secure password for the account: ${userName}`);\n      return;\n    }\n    alert(`Hello ${userName}`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setUserName('');\n    setPassword('');\n    setEmail('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", userName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: email,\n        name: \"email\",\n        onChange: handleInputChange,\n        type: \"email\",\n        placeholder: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: userName,\n        name: \"userName\",\n        onChange: handleInputChange,\n        type: \"text\",\n        placeholder: \"username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: password,\n        name: \"password\",\n        onChange: handleInputChange,\n        type: \"textarea\",\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Form, \"42zIdPd0aRzv1KH8BVXrypGKENU=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","checkPassword","validateEmail","Form","email","setEmail","userName","setUserName","password","setPassword","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","handleFormSubmit","preventDefault","alert"],"sources":["/Users/Rickychen/Documents/Coding/BootCamp/Potfolio_Qi_Chen/src/components/contact.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// Here we import a helper function that will check if the email is valid\nimport { checkPassword, validateEmail } from '../utils/helpers';\n\nfunction Form() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'userName') {\n      setUserName(inputValue);\n    } else {\n      setPassword(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\n    if (!validateEmail(email) || !userName) {\n      setErrorMessage('Email or username is invalid');\n      // We want to exit out of this code block if something is wrong so that the user can correct it\n      return;\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    }\n    if (!checkPassword(password)) {\n      setErrorMessage(\n        `Choose a more secure password for the account: ${userName}`\n      );\n      return;\n    }\n    alert(`Hello ${userName}`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setUserName('');\n    setPassword('');\n    setEmail('');\n  };\n\n  return (\n    <div>\n      <p>Hello {userName}</p>\n      <form className=\"form\">\n        <input\n          value={email}\n          name=\"email\"\n          onChange={handleInputChange}\n          type=\"email\"\n          placeholder=\"email\"\n        />\n        <input\n          value={userName}\n          name=\"userName\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"username\"\n        />\n        <input\n          value={password}\n          name=\"password\"\n          onChange={handleInputChange}\n          type=\"textarea\"\n          placeholder=\"Password\"\n        />\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Form;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA,SAASC,aAAa,EAAEC,aAAa,QAAQ,kBAAkB;AAAC;AAEhE,SAASC,IAAI,GAAG;EAAA;EACd;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMY,iBAAiB,GAAIC,CAAC,IAAK;IAC/B;IACA,MAAM;MAAEC;IAAO,CAAC,GAAGD,CAAC;IACpB,MAAME,SAAS,GAAGD,MAAM,CAACE,IAAI;IAC7B,MAAMC,UAAU,GAAGH,MAAM,CAACI,KAAK;;IAE/B;IACA,IAAIH,SAAS,KAAK,OAAO,EAAE;MACzBV,QAAQ,CAACY,UAAU,CAAC;IACtB,CAAC,MAAM,IAAIF,SAAS,KAAK,UAAU,EAAE;MACnCR,WAAW,CAACU,UAAU,CAAC;IACzB,CAAC,MAAM;MACLR,WAAW,CAACQ,UAAU,CAAC;IACzB;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIN,CAAC,IAAK;IAC9B;IACAA,CAAC,CAACO,cAAc,EAAE;;IAElB;IACA,IAAI,CAAClB,aAAa,CAACE,KAAK,CAAC,IAAI,CAACE,QAAQ,EAAE;MACtCK,eAAe,CAAC,8BAA8B,CAAC;MAC/C;MACA;MACA;IACF;;IACA,IAAI,CAACV,aAAa,CAACO,QAAQ,CAAC,EAAE;MAC5BG,eAAe,CACZ,kDAAiDL,QAAS,EAAC,CAC7D;MACD;IACF;IACAe,KAAK,CAAE,SAAQf,QAAS,EAAC,CAAC;;IAE1B;IACAC,WAAW,CAAC,EAAE,CAAC;IACfE,WAAW,CAAC,EAAE,CAAC;IACfJ,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,qBAAUC,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eACvB;MAAM,SAAS,EAAC,MAAM;MAAA,wBACpB;QACE,KAAK,EAAEF,KAAM;QACb,IAAI,EAAC,OAAO;QACZ,QAAQ,EAAEQ,iBAAkB;QAC5B,IAAI,EAAC,OAAO;QACZ,WAAW,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QACnB,eACF;QACE,KAAK,EAAEN,QAAS;QAChB,IAAI,EAAC,UAAU;QACf,QAAQ,EAAEM,iBAAkB;QAC5B,IAAI,EAAC,MAAM;QACX,WAAW,EAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QACtB,eACF;QACE,KAAK,EAAEJ,QAAS;QAChB,IAAI,EAAC,UAAU;QACf,QAAQ,EAAEI,iBAAkB;QAC5B,IAAI,EAAC,UAAU;QACf,WAAW,EAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QACtB,eACF;QAAQ,IAAI,EAAC,QAAQ;QAAC,OAAO,EAAEO,gBAAiB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3D,EACNT,YAAY,iBACX;MAAA,uBACE;QAAG,SAAS,EAAC,YAAY;QAAA,UAAEA;MAAY;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QAE/C;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GAnFQP,IAAI;AAAA,KAAJA,IAAI;AAqFb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}